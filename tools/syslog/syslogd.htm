<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>Syslog</title>
  <link rel="stylesheet" href="/slickgrid/slick.grid.css" type="text/css"/>
  <link rel="stylesheet" href="/slickgrid/css/smoothness/jquery-ui-1.8.16.custom.css" type="text/css"/>
  <link rel="stylesheet" href="/slickgrid/controls/slick.pager.css" type="text/css"/>
  <link rel="stylesheet" href="/slickgrid/controls/slick.columnpicker.css" type="text/css"/>
  
  <link rel="stylesheet" href="/css/custom.css" type="text/css"/>
 


</head>
<body>
  <div id="myView" style="width:100%;">
    <div class="grid-header" style="width:100%">
      <label>SYSLOG</label>
      <span style="float:right">Filter for  <input type="text" id="txtSearch"></span>
    </div>
    <div id="myGrid" style="width:100%;height:500px;"></div>
    <div id="pager" style="width:100%;height:20px;"></div>
    <div id="bottom" style="width:100%;height:20px;"><title>Syslog</title></div>
  </div>




<script src="/socket.io/socket.io.js"></script>

<script src="/slickgrid/lib/jquery-1.7.min.js"></script>
<script src="/slickgrid/lib/jquery.event.drag-2.2.js"></script>
<script src="/slickgrid/slick.core.js"></script>
<script src="/slickgrid/slick.grid.js"></script>
<script src="/slickgrid/slick.dataview.js"></script>


<script src="/slickgrid/lib/firebugx.js"></script>

<script src="/slickgrid/lib/jquery-1.7.min.js"></script>
<script src="/slickgrid/lib/jquery-ui-1.8.16.custom.min.js"></script>
<script src="/slickgrid/lib/jquery.event.drag-2.2.js"></script>

<script src="/slickgrid/slick.core.js"></script>
<script src="/slickgrid/slick.formatters.js"></script>
<script src="/slickgrid/slick.editors.js"></script>

<script src="/slickgrid/plugins/slick.rowselectionmodel.js"></script>
<script src="/slickgrid/controls/slick.pager.js"></script>
<script src="/slickgrid/controls/slick.columnpicker.js"></script>







<script>
    socket = io.connect();
    socket.emit('join')

    var grid, dataView;
    var data = [];

    var columns = [

    { id: "date", name: "Date", field: "date", sortable: false },
    { id: "time", name: "Time", field: "time", sortable: false },
    { id: "facility", name: "Facility", field: "facility", sortable: false },
    { id: "severity", name: "Severity", field: "severity", sortable: false },
    { id: "host", name: "Host", field: "host", sortable: false },
    { id: "msg", name: "Message", field: "msg", width: 1200, sortable: false }
  ];


    var options = {
        enableColumnReorder: false,
        editable: true,
        enableAddRow: true,
        enableCellNavigation: true,
        asyncEditorLoading: true,
        forceFitColumns: false,
        topPanelHeight: 25
    };
    var sortcol = "";
    var sortdir = 1;
    var searchString = "";

    dataView = new Slick.Data.DataView({ inlineFilters: true });
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    grid.setSelectionModel(new Slick.RowSelectionModel());

    var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
    var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);




    function requiredFieldValidator(value) {
        if (value == null || value == undefined || !value.length) {
            return { valid: false, msg: "This is a required field" };
        }
        else {
            return { valid: true, msg: null };
        }
    }

    function myFilter(item, args) {
        var found = false;
        if (args.searchString == "") {
            return true;
        }
        if (item["msg"].indexOf(args.searchString) > -1) {
            found = true;
        }
        if (item["host"].indexOf(args.searchString) > -1) {
            found = true;
        }
        if (item["severity"].indexOf(args.searchString) > -1) {
            found = true;
        }
        if (item["facility"].indexOf(args.searchString) > -1) {
            found = true;
        }
        if (item["time"].indexOf(args.searchString) > -1) {
            found = true;
        }
        if (item["date"].indexOf(args.searchString) > -1) {
            found = true;
        }
        return found;
    }

    function comparer(a, b) {
        var x = a[sortcol], y = b[sortcol];
        return (x == y ? 0 : (x > y ? 1 : -1));
    }



    grid.onCellChange.subscribe(function (e, args) {
        dataView.updateItem(args.item.id, args.item);
    });

    grid.onAddNewRow.subscribe(function (e, args) {
        var item = {};
        item["id"] = "id_" + (Math.round(Math.random() * 10000));
        item["ipv"] = 'IPv4';
        item["date"] = "01/01/2009";
        item["time"] = "00:00:00";
        item["facility"] = 'Local4';
        item["serverity"] = 'Informational';
        item["host"] = "127.0.0.1";
        item["msg"] = "test " + i;
        $.extend(item, args.item);
        dataView.addItem(item);
    });


    grid.onKeyDown.subscribe(function (e) {
        // select all rows on ctrl-a
        if (e.which != 65 || !e.ctrlKey) {
            return false;
        }

        var rows = [];
        for (var i = 0; i < dataView.getLength(); i++) {
            rows.push(i);
        }

        grid.setSelectedRows(rows);
        e.preventDefault();
    });




    grid.onSort.subscribe(function (e, args) {
        sortdir = args.sortAsc ? 1 : -1;
        sortcol = args.sortCol.field;
        dataView.sort(comparer, args.sortAsc);
        
    });


    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });

    dataView.onPagingInfoChanged.subscribe(function (e, pagingInfo) {
        var isLastPage = pagingInfo.pageNum == pagingInfo.totalPages - 1;
        var enableAddRow = isLastPage || pagingInfo.pageSize == 0;
        var options = grid.getOptions();

        if (options.enableAddRow != enableAddRow) {
            grid.setOptions({ enableAddRow: enableAddRow });
        }
    });


    // wire up the search textbox to apply the filter to the model
    $("#txtSearch").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();

        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }

        searchString = this.value;
        updateFilter();
    });

    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }


    // initialize the model after all the events have been hooked up
    dataView.beginUpdate();
    dataView.setItems(data);
    dataView.setFilterArgs({
        searchString: searchString
    });
    dataView.setFilter(myFilter);
    dataView.endUpdate();



    dataView.syncGridSelection(grid, true);

    $("#gridContainer").resizable();


    socket.on('message', function (line) {
        data.unshift(line);

        smoother();

    });

    function debounce(func, wait, immediate) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                timeout = null;
                if (!immediate) {
                    func.apply(context, args);
                }
            }, wait);
            if (immediate && !timeout) func.apply(context, args);
        };
    };


    var smoother = debounce(function () { dataView.refresh(); }, 10, false);






</script>




</body>
</html>
